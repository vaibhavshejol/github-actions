name: DAST Security Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  packages: write

jobs:
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 
        with:
          gradle-version: 8.5

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Run application in container to scan with ZAP
        run: docker run -d -p 9090:9090 --name github-actions ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
    
      - name: Wait 10 seconds to start application
        run: sleep 10

      - name: Application container logs
        run: docker logs github-actions

      - name: Test container is running
        run: curl -s localhost:9090/com.amazingcode.in/api/message
     
      - name: Run ZAP OWASP full scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          target: 'http://localhost:9090'
          cmd_options: '-a -j -l WARN -r report_html.html -w report_md.md -J report_json.json -z "-addoninstallall" '
          allow_issue_writing: true

      - name: Create Dockerfile for SARIF Conversion
        run: |
          echo "FROM owasp/zap2docker-weekly" > Dockerfile.sarif
          echo "RUN mkdir -p /zap-reporting/extensions" >> Dockerfile.sarif
          echo "COPY sarif-extension.zap /zap-reporting/extensions/sarif-extension.zap" >> Dockerfile.sarif
          echo "RUN zap-cli install-extension /zap-reporting/extensions/sarif-extension.zap" >> Dockerfile.sarif
          echo "COPY report_json.json /report_json.json" >> Dockerfile.sarif
          echo "RUN zap-cli convert-report -f sarif /report_json.json > /zap_report.sarif" >> Dockerfile.sarif

      - name: Convert ZAP report to SARIF
        run: |
          docker build -t zap-sarif-converter -f Dockerfile.sarif .
          docker run --rm -v $(pwd):/output zap-sarif-converter

      - name: Upload SARIF report
        uses: actions/upload-artifact@v3
        with:
          name: DAST_Report.sarif
          path: ./zap_report.sarif

      - name: Upload JSON report
        uses: actions/upload-artifact@v3
        with:
          name: DAST_Report.json
          path: ./report_json.json

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: DAST_Report.html
          path: ./report_html.html

      - name: Package JSON Report & Upload to Container registry
        run: |
          echo "FROM alpine" > Dockerfile
          echo "COPY zap_report.sarif /zap_report.sarif" >> Dockerfile
          echo "CMD [\"cat\", \"/zap_report.sarif\"]" >> Dockerfile

          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

          IMAGE_TAG="ghcr.io/${REPO_OWNER}/${REPO_NAME}/dast-report:latest"

          docker build -t $IMAGE_TAG .
          docker push "$IMAGE_TAG"

      - name: Stop docker
        if: always()
        run: |
          docker stop github-actions || true
          docker rm github-actions || true
          docker container prune --force || true
          docker image prune --force || true